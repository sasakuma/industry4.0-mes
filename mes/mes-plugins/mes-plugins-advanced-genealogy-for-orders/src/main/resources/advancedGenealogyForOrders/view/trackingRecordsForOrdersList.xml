<!--

    ***************************************************************************
    Copyright (c) 2010 Qcadoo Limited
    Project: Qcadoo Framework
    Version: 1.4

    This file is part of Qcadoo.

    Qcadoo is free software; you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation; either version 3 of the License,
    or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty
    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
    ***************************************************************************

-->
<view defaultAuthorizationRole="ROLE_BATCHES" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schema.qcadoo.org/view"
	xsi:schemaLocation="http://schema.qcadoo.org/view http://schema.qcadoo.org/view.xsd"
	name="trackingRecordsForOrdersList" modelPlugin="advancedGenealogy"
	modelName="trackingRecord" menuAccessible="true">

	<component type="window" name="window" reference="window">

		<ribbon>
			<template name="standardGridTemplate" />
			<group name="status">
				<smallButton name="accept" icon="startIcon16.png" state="enabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.status.accept.confirm)}")) {
										#{grid}.performEvent('changeTrackingRecordState', ["02accepted"]);
									};
								}
							});
						]]>
					</script>
				</smallButton>
				<smallButton name="decline" icon="deleteIcon16.png"
					state="enabled">
					<script>
						<![CDATA[
							this.addOnChangeListener({
								onClick: function() {
									if (window.confirm("#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.status.decline.confirm)}")) {
										#{grid}.performEvent('changeTrackingRecordState', ["03declined"]);
									};
								}
							});
						]]>
					</script>
				</smallButton>
			</group>
		</ribbon>

		<component type="grid" name="trackingRecordsForOrdersListGrid"
			reference="grid">
			<script>
				<![CDATA[
					var buttonsOther = ["actions.copy", "actions.delete"];
					var buttonsStatus = ["status.accept", "status.decline"];
					
					var copyButton = #{window}.getRibbonItem("actions.copy");
					var deleteButton = #{window}.getRibbonItem("actions.delete");
					
					var acceptButton = #{window}.getRibbonItem("status.accept");
					var declineButton = #{window}.getRibbonItem("status.decline");
					
					var listener = {
						onChange: function(selectedEntitiesArray) {
							if (!selectedEntitiesArray || selectedEntitiesArray.length == 0) {
								disableButtons(buttonsOther);
								disableButtons(buttonsStatus);
							} else {
								var differentStates = statesAreDifferent(selectedEntitiesArray);
							
								var state = selectedEntitiesArray[0].fields.state;
								
								var isDraft = (state == "01draft");
								var isAccepted = (state == "02accepted");
								var isDeclined = (state == "03declined");
								
								var isDisabled = false;
								var isExternal = false;	
									
								for (var i in selectedEntitiesArray) {
									var orderState = selectedEntitiesArray[0].fields.orderState;
											
									var orderAtLeastAccepted = (orderState != "01pending");
									var orderAtLeastInProgress = orderAtLeastAccepted && (orderState != "02accepted");
									
									var trackingTreatment = selectedEntitiesArray[i].fields.trackingTreatment;
						
									var unchangablePlanAfterOrderAccept = (trackingTreatment == "02unchangablePlanAfterOrderAccept");
									var unchangablePlanAfterOrderStart = (trackingTreatment == "03unchangablePlanAfterOrderStart");
									
									if (isAccepted || (orderAtLeastAccepted && unchangablePlanAfterOrderAccept) ||
										(orderAtLeastInProgress && unchangablePlanAfterOrderStart)) {
										disable = true;
										break;
									}
									
									if (selectedEntitiesArray[i].fields.externalNumber != null) {
										isExternal = true;
									}
								}
								
								if (differentStates) {	
									disableButtons(buttonsOther, "#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.message.differentStates)}");
									disableButtons(buttonsStatus, "#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.message.differentStates)}");
								} else {
									if (isDraft) {
										enableButtons(buttonsOther);
										enableButtons(buttonsStatus);
									} else if (isAccepted || isDisabled) {
										copyButton.enable();
										deleteButton.disable("#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.message.canNotDeleteTrackingRecord)}");
										acceptButton.disable();
										declineButton.enable();
									} else if (isDeclined) {
										enableButtons(buttonsOther);
										disableButtons(buttonsStatus);
									}
										
									if (isExternal) {
										deleteButton.disable("#{translate(advancedGenealogyForOrders.trackingRecordsForOrdersList.window.ribbon.message.selectedtrackingRecordIsExternal)}");
									}
								}
							}
						}
					}
					
					function statesAreDifferent(selectedEntitiesArray) {
						if (selectedEntitiesArray.length < 2) {
							return false;
						}
						for (var i = 1; i < selectedEntitiesArray.length; i++) {
							if (selectedEntitiesArray[i-1].fields.state != selectedEntitiesArray[i].fields.state) {
								return true;
							}
						}
						return false;
					}
					
					function disableButtons(buttonNames, message) { 
						for (var buttonName in buttonNames) { 
							if ( message == '') {
								#{window}.getRibbonItem(buttonNames[buttonName]).disable();
							} else {
								#{window}.getRibbonItem(buttonNames[buttonName]).disable(message);
							}
						} 
					} 
					
					function enableButtons(buttonNames, message) { 
						for (var buttonName in buttonNames) { 	
							if ( message == '') {
								#{window}.getRibbonItem(buttonNames[buttonName]).enable();
							} else {
								#{window}.getRibbonItem(buttonNames[buttonName]).enable(message);
							}
						} 
					} 
					
					#{grid}.addOnChangeListener(listener);
				]]>
			</script>
			<option type="column" name="numberName" fields="number" link="true" />
			<option type="column" name="producedBatchName" fields="producedBatch"
				expression="(#producedBatch == null) ? '' : #producedBatch.get('number')"
				link="true" width="100" />
			<option type="column" name="orderNumber" fields="order"
				expression="#order.get('number')" link="true" width="200" />
			<option type="column" name="orderName" fields="order"
				expression="#order.get('name')" link="true" width="200" />
			<option type="column" name="productNumber" fields="producedBatch"
				expression="(#producedBatch == null) ? '' : #producedBatch.get('product').get('number')"
				link="true" width="200" />
			<option type="column" name="state" fields="state" expression="#state" width="75" />
			<option type="column" name="enteredDate" fields="stateChanges"
				expression="#stateChanges[0].getField('dateAndTime').toLocaleString()" />
			<option type="column" name="enteredBy" fields="stateChanges"
				expression="#stateChanges[0].getField('worker')" />
			<option type="column" name="orderState" fields="order"
				expression="#order.get('state')" hidden="true" />
			<option type="column" name="trackingTreatment" fields="order"
				expression="#order.get('trackingRecordTreatment')" hidden="true" />
			<option type="column" name="externalNumber" fields="externalNumber"
				hidden="true" />

			<option type="order" column="producedBatchName" direction="desc" />

			<option type="searchable"
				value="numberName,producedBatchName,orderNumber,orderName,productNumber,state,enteredDate,enteredBy" />
			<option type="orderable"
				value="numberName,producedBatchName,orderNumber,orderName,productNumber,state,enteredDate,enteredBy" />

			<option type="correspondingView"
				value="advancedGenealogyForOrders/trackingRecordForOrdersDetails" />
			<option type="correspondingComponent" value="form" />

			<option type="fullscreen" value="true" />
			<option type="multiselect" value="true" />

			<listener event="changeTrackingRecordState"
				class="com.qcadoo.mes.advancedGenealogy.states.client.TrackingRecordStateChangeViewClient"
				method="changeState" />
		</component>

		<option type="header" value="false" />
		<option type="fixedHeight" value="true" />
	</component>

	<hooks>
		<beforeRender
			class="com.qcadoo.mes.advancedGenealogyForOrders.hooks.TrackingForOrdersViewHooks"
			method="addDiscriminatorRestrictionToGrid" />
	</hooks>

</view>